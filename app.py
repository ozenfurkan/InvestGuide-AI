import streamlit as st
import asyncio
from main import get_investment_report # Sadece bu fonksiyona ihtiyacÄ±mÄ±z var

# Streamlit'in asenkron fonksiyonlarla uyumlu Ã§alÄ±ÅŸmasÄ± iÃ§in olay dÃ¶ngÃ¼sÃ¼ ayarÄ±
# Bu, uygulamanÄ±n farklÄ± ortamlarda sorunsuz Ã§alÄ±ÅŸmasÄ±nÄ± saÄŸlar.
try:
    loop = asyncio.get_running_loop()
except RuntimeError:
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

st.set_page_config(
    page_title="InvestGuide AI",
    page_icon="ğŸ¤–",
    layout="wide"
)

st.title("InvestGuide AI: YatÄ±rÄ±m TeÅŸvik AsistanÄ±")
st.caption("TÃ¼rkiye'deki yatÄ±rÄ±m teÅŸvikleri hakkÄ±nda anÄ±nda, gÃ¼venilir ve mevzuata dayalÄ± cevaplar alÄ±n.")

# Session state'i yÃ¶neterek sayfa yenilense bile raporun kaybolmamasÄ±nÄ± saÄŸla
if 'report' not in st.session_state:
    st.session_state.report = None


# --- ArayÃ¼z Komponentleri ---
with st.form(key='investment_form'):
    user_query = st.text_area(
        "YatÄ±rÄ±m planÄ±nÄ±zÄ± detaylÄ± olarak aÃ§Ä±klayÄ±n:",
        "Ã–rnek: Gaziantep'te 30 Milyon TL'lik bir tekstil fabrikasÄ± kurmayÄ± planlÄ±yorum. Devletten alabileceÄŸim teÅŸvikler nelerdir?",
        height=150
    )
    submit_button = st.form_submit_button(label='Analiz Et ğŸ¤–')


async def run_analysis_and_store_report(query: str):
    """Analiz sÃ¼recini Ã§alÄ±ÅŸtÄ±rÄ±r ve sonucu session state'e kaydeder."""
    with st.spinner('Analiz yapÄ±lÄ±yor... Bu iÅŸlem 1-2 dakika sÃ¼rebilir. LÃ¼tfen bekleyin.'):
        # get_investment_report fonksiyonu bize bir sÃ¶zlÃ¼k (dictionary) dÃ¶ndÃ¼rÃ¼r.
        report_data = await get_investment_report(query)
        st.session_state.report = report_data


if submit_button and user_query:
    # 'Analiz Et' butonuna basÄ±ldÄ±ÄŸÄ±nda asenkron analizi Ã§alÄ±ÅŸtÄ±r
    loop.run_until_complete(run_analysis_and_store_report(user_query))
    
# --- Rapor GÃ¶sterim AlanÄ± ---
# Analiz tamamlandÄ±ysa ve session state'de bir rapor varsa, onu ekrana yazdÄ±r.
if st.session_state.report:
    report = st.session_state.report
    st.markdown("---")
    st.header("ğŸ“ˆ YatÄ±rÄ±m TeÅŸvik Analiz Raporu")
    st.markdown("---")

    st.subheader(f"BaÅŸlÄ±k: {report.get('title', 'BaÅŸlÄ±k BulunamadÄ±')}")
    st.info(f"**Ã–zet:** {report.get('summary', 'Ã–zet bulunamadÄ±.')}")
    
    with st.expander("DetaylÄ± GerekÃ§e ve Analiz SÃ¼reci"):
        st.markdown(report.get('reasoning', 'GerekÃ§e detayÄ± bulunamadÄ±.'))

    st.subheader("âœ… YararlanÄ±labilecek Destek UnsurlarÄ±")
    st.markdown(report.get('supports_section', 'Destek unsurlarÄ± bulunamadÄ±.'))

    st.subheader("ğŸ“œ Ã–zel KoÅŸullar ve Ä°stisnalar")
    st.markdown(report.get('conditions_section', 'Ã–zel koÅŸul bulunamadÄ±.'))


# --- Yan MenÃ¼ ---
with st.sidebar:
    st.header("NasÄ±l Ã‡alÄ±ÅŸÄ±r?")
    st.markdown("""
    Bu asistan, sorduÄŸunuz yatÄ±rÄ±m planÄ±nÄ± analiz etmek iÃ§in geliÅŸmiÅŸ bir yapay zeka (AI) iÅŸ akÄ±ÅŸÄ± kullanÄ±r.
    
    Analiz sÃ¼reci ÅŸu adÄ±mlarÄ± iÃ§erir:
    1.  **VarlÄ±k Ã‡Ä±karma:** Sorunuzdan yatÄ±rÄ±m konusu, bÃ¶lge ve miktar gibi anahtar bilgileri Ã§Ä±karÄ±r.
    2.  **Mevzuat Denetimi:** YatÄ±rÄ±mÄ±nÄ±zÄ±n teÅŸvik edilip edilemeyeceÄŸini kontrol eder.
    3.  **Belge Arama (RAG):** Ä°lgili gÃ¼ncel mevzuat metinlerini vektÃ¶r veritabanÄ±ndan bulur.
    4.  **Analiz ve Sentez:** AI, bulduÄŸu belgeleri ve yatÄ±rÄ±m tÃ¼rÃ¼nÃ¼zÃ¼ analiz ederek size Ã¶zel bir rapor oluÅŸturur.
    """)
    st.warning("Bu rapor Ã¶n bilgilendirme amaÃ§lÄ±dÄ±r ve yasal tavsiye niteliÄŸi taÅŸÄ±maz.") 